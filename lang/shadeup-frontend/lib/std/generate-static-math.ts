import { makeVectors, simpleFunctions, singleFunctions } from './static-math-db';

let out = `
///
/// GENERATED
/// DO NOT EDIT THIS FILE
/// see generate-static-math.ts
///
export const FM = {\n`;

for (let [name, op] of simpleFunctions) {
	let f = typeof op === 'string' ? (a, b) => `${a} ${op} ${b}` : op;
	out += `\t${name}_1_1(a: number, b: number): number { return ${f('a', 'b')}; },\n`;
	out += `\t${name}_2_1(a: [number, number], b: number): [number, number] { return [${f(
		'a[0]',
		'b'
	)}, ${f('a[1]', 'b')}]; },\n`;
	out += `\t${name}_1_2(a: number, b: [number, number]): [number, number] { return [${f(
		'a',
		'b[0]'
	)}, ${f('a', 'b[1]')}]; },\n`;
	out += `\t${name}_2_2(a: [number, number], b: [number, number]): [number, number] { return [${f(
		'a[0]',
		'b[0]'
	)}, ${f('a[1]', 'b[1]')}]; },\n`;
	out += `\t${name}_3_1(a: [number, number, number], b: number): [number, number, number] { return [${f(
		'a[0]',
		'b'
	)}, ${f('a[1]', 'b')}, ${f('a[2]', 'b')}]; },\n`;
	out += `\t${name}_1_3(a: number, b: [number, number, number]): [number, number, number] { return [${f(
		'a',
		'b[0]'
	)}, ${f('a', 'b[1]')}, ${f('a', 'b[2]')}]; },\n`;
	out += `\t${name}_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [${f(
		'a[0]',
		'b[0]'
	)}, ${f('a[1]', 'b[1]')}, ${f('a[2]', 'b[2]')}]; },\n`;
	out += `\t${name}_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [${f(
		'a[0]',
		'b'
	)}, ${f('a[1]', 'b')}, ${f('a[2]', 'b')}, ${f('a[3]', 'b')}]; },\n`;
	out += `\t${name}_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [${f(
		'a',
		'b[0]'
	)}, ${f('a', 'b[1]')}, ${f('a', 'b[2]')}, ${f('a', 'b[3]')}]; },\n`;
	out += `\t${name}_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [${f(
		'a[0]',
		'b[0]'
	)}, ${f('a[1]', 'b[1]')}, ${f('a[2]', 'b[2]')}, ${f('a[3]', 'b[3]')}]; },\n`;
}

for (let [name, op] of singleFunctions) {
	let f = typeof op === 'string' ? (a) => `${op}(${a})` : op;
	out += `\t${name}_1(a: number): number { return ${f('a')}; },\n`;
	out += `\t${name}_2(a: [number, number]): [number, number] { return [${f('a[0]')}, ${f(
		'a[1]'
	)}]; },\n`;
	out += `\t${name}_3(a: [number, number, number]): [number, number, number] { return [${f(
		'a[0]'
	)}, ${f('a[1]')}, ${f('a[2]')}]; },\n`;
	out += `\t${name}_4(a: [number, number, number, number]): [number, number, number, number] { return [${f(
		'a[0]'
	)}, ${f('a[1]')}, ${f('a[2]')}, ${f('a[3]')}]; },\n`;
}

for (let [name, op] of makeVectors) {
	out += `\t${name}_2_1_1(a: number, b: number): [number, number] { return [a${op}, b${op}]; },\n`;
	out += `\t${name}_2_2(a: [number, number]): [number, number] { return [a[0]${op}, a[1]${op}]; },\n`;

	out += `\t${name}_3_1_1_1(a: number, b: number, c: number): [number, number, number] { return [a${op}, b${op}, c${op}]; },\n`;
	out += `\t${name}_3_2_1(a: [number, number], b: number): [number, number, number] { return [a[0]${op}, a[1]${op}, b${op}]; },\n`;
	out += `\t${name}_3_1_2(a: number, b: [number, number]): [number, number, number] { return [a${op}, b[0]${op}, b[1]${op}]; },\n`;
	out += `\t${name}_3_3(a: [number, number, number]): [number, number, number] { return [a[0]${op}, a[1]${op}, a[2]${op}]; },\n`;

	out += `\t${name}_4_1_1_1_1(a: number, b: number, c: number, d: number): [number, number, number, number] { return [a${op}, b${op}, c${op}, d${op}]; },\n`;
	out += `\t${name}_4_2_1_1(a: [number, number], b: number, c: number): [number, number, number, number] { return [a[0]${op}, a[1]${op}, b${op}, c${op}]; },\n`;
	out += `\t${name}_4_1_2_1(a: number, b: [number, number], c: number): [number, number, number, number] { return [a${op}, b[0]${op}, b[1]${op}, c${op}]; },\n`;
	out += `\t${name}_4_1_1_2(a: number, b: number, c: [number, number]): [number, number, number, number] { return [a${op}, b${op}, c[0]${op}, c[1]${op}]; },\n`;
	out += `\t${name}_4_3_1(a: [number, number, number], b: number): [number, number, number, number] { return [a[0]${op}, a[1]${op}, a[2]${op}, b${op}]; },\n`;
	out += `\t${name}_4_1_3(a: number, b: [number, number, number]): [number, number, number, number] { return [a${op}, b[0]${op}, b[1]${op}, b[2]${op}]; },\n`;
	out += `\t${name}_4_2_2(a: [number, number], b: [number, number]): [number, number, number, number] { return [a[0]${op}, a[1]${op}, b[0]${op}, b[1]${op}]; },\n`;
	out += `\t${name}_4_4(a: [number, number, number, number]): [number, number, number, number] { return [a[0]${op}, a[1]${op}, a[2]${op}, a[3]${op}]; },\n`;
}

out += `}`;

console.log(out);
