
///
/// GENERATED
/// DO NOT EDIT THIS FILE
/// see generate-static-math.ts
///
export const FM = {
	add_1_1(a: number, b: number): number { return a + b; },
	add_2_1(a: [number, number], b: number): [number, number] { return [a[0] + b, a[1] + b]; },
	add_1_2(a: number, b: [number, number]): [number, number] { return [a + b[0], a + b[1]]; },
	add_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] + b[0], a[1] + b[1]]; },
	add_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] + b, a[1] + b, a[2] + b]; },
	add_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a + b[0], a + b[1], a + b[2]]; },
	add_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] + b[0], a[1] + b[1], a[2] + b[2]]; },
	add_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] + b, a[1] + b, a[2] + b, a[3] + b]; },
	add_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a + b[0], a + b[1], a + b[2], a + b[3]]; },
	add_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] + b[0], a[1] + b[1], a[2] + b[2], a[3] + b[3]]; },
	sub_1_1(a: number, b: number): number { return a - b; },
	sub_2_1(a: [number, number], b: number): [number, number] { return [a[0] - b, a[1] - b]; },
	sub_1_2(a: number, b: [number, number]): [number, number] { return [a - b[0], a - b[1]]; },
	sub_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] - b[0], a[1] - b[1]]; },
	sub_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] - b, a[1] - b, a[2] - b]; },
	sub_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a - b[0], a - b[1], a - b[2]]; },
	sub_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] - b[0], a[1] - b[1], a[2] - b[2]]; },
	sub_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] - b, a[1] - b, a[2] - b, a[3] - b]; },
	sub_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a - b[0], a - b[1], a - b[2], a - b[3]]; },
	sub_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] - b[0], a[1] - b[1], a[2] - b[2], a[3] - b[3]]; },
	div_1_1(a: number, b: number): number { return a / b; },
	div_2_1(a: [number, number], b: number): [number, number] { return [a[0] / b, a[1] / b]; },
	div_1_2(a: number, b: [number, number]): [number, number] { return [a / b[0], a / b[1]]; },
	div_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] / b[0], a[1] / b[1]]; },
	div_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] / b, a[1] / b, a[2] / b]; },
	div_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a / b[0], a / b[1], a / b[2]]; },
	div_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] / b[0], a[1] / b[1], a[2] / b[2]]; },
	div_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] / b, a[1] / b, a[2] / b, a[3] / b]; },
	div_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a / b[0], a / b[1], a / b[2], a / b[3]]; },
	div_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] / b[0], a[1] / b[1], a[2] / b[2], a[3] / b[3]]; },
	mul_1_1(a: number, b: number): number { return a * b; },
	mul_2_1(a: [number, number], b: number): [number, number] { return [a[0] * b, a[1] * b]; },
	mul_1_2(a: number, b: [number, number]): [number, number] { return [a * b[0], a * b[1]]; },
	mul_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] * b[0], a[1] * b[1]]; },
	mul_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] * b, a[1] * b, a[2] * b]; },
	mul_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a * b[0], a * b[1], a * b[2]]; },
	mul_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] * b[0], a[1] * b[1], a[2] * b[2]]; },
	mul_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] * b, a[1] * b, a[2] * b, a[3] * b]; },
	mul_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a * b[0], a * b[1], a * b[2], a * b[3]]; },
	mul_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] * b[0], a[1] * b[1], a[2] * b[2], a[3] * b[3]]; },
	mod_1_1(a: number, b: number): number { return a % b; },
	mod_2_1(a: [number, number], b: number): [number, number] { return [a[0] % b, a[1] % b]; },
	mod_1_2(a: number, b: [number, number]): [number, number] { return [a % b[0], a % b[1]]; },
	mod_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] % b[0], a[1] % b[1]]; },
	mod_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] % b, a[1] % b, a[2] % b]; },
	mod_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a % b[0], a % b[1], a % b[2]]; },
	mod_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] % b[0], a[1] % b[1], a[2] % b[2]]; },
	mod_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] % b, a[1] % b, a[2] % b, a[3] % b]; },
	mod_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a % b[0], a % b[1], a % b[2], a % b[3]]; },
	mod_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] % b[0], a[1] % b[1], a[2] % b[2], a[3] % b[3]]; },
	bitand_1_1(a: number, b: number): number { return a & b; },
	bitand_2_1(a: [number, number], b: number): [number, number] { return [a[0] & b, a[1] & b]; },
	bitand_1_2(a: number, b: [number, number]): [number, number] { return [a & b[0], a & b[1]]; },
	bitand_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] & b[0], a[1] & b[1]]; },
	bitand_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] & b, a[1] & b, a[2] & b]; },
	bitand_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a & b[0], a & b[1], a & b[2]]; },
	bitand_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] & b[0], a[1] & b[1], a[2] & b[2]]; },
	bitand_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] & b, a[1] & b, a[2] & b, a[3] & b]; },
	bitand_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a & b[0], a & b[1], a & b[2], a & b[3]]; },
	bitand_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] & b[0], a[1] & b[1], a[2] & b[2], a[3] & b[3]]; },
	bitor_1_1(a: number, b: number): number { return a | b; },
	bitor_2_1(a: [number, number], b: number): [number, number] { return [a[0] | b, a[1] | b]; },
	bitor_1_2(a: number, b: [number, number]): [number, number] { return [a | b[0], a | b[1]]; },
	bitor_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] | b[0], a[1] | b[1]]; },
	bitor_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] | b, a[1] | b, a[2] | b]; },
	bitor_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a | b[0], a | b[1], a | b[2]]; },
	bitor_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] | b[0], a[1] | b[1], a[2] | b[2]]; },
	bitor_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] | b, a[1] | b, a[2] | b, a[3] | b]; },
	bitor_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a | b[0], a | b[1], a | b[2], a | b[3]]; },
	bitor_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] | b[0], a[1] | b[1], a[2] | b[2], a[3] | b[3]]; },
	bitxor_1_1(a: number, b: number): number { return a ^ b; },
	bitxor_2_1(a: [number, number], b: number): [number, number] { return [a[0] ^ b, a[1] ^ b]; },
	bitxor_1_2(a: number, b: [number, number]): [number, number] { return [a ^ b[0], a ^ b[1]]; },
	bitxor_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] ^ b[0], a[1] ^ b[1]]; },
	bitxor_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] ^ b, a[1] ^ b, a[2] ^ b]; },
	bitxor_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a ^ b[0], a ^ b[1], a ^ b[2]]; },
	bitxor_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2]]; },
	bitxor_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] ^ b, a[1] ^ b, a[2] ^ b, a[3] ^ b]; },
	bitxor_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a ^ b[0], a ^ b[1], a ^ b[2], a ^ b[3]]; },
	bitxor_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] ^ b[0], a[1] ^ b[1], a[2] ^ b[2], a[3] ^ b[3]]; },
	lshift_1_1(a: number, b: number): number { return a << b; },
	lshift_2_1(a: [number, number], b: number): [number, number] { return [a[0] << b, a[1] << b]; },
	lshift_1_2(a: number, b: [number, number]): [number, number] { return [a << b[0], a << b[1]]; },
	lshift_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] << b[0], a[1] << b[1]]; },
	lshift_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] << b, a[1] << b, a[2] << b]; },
	lshift_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a << b[0], a << b[1], a << b[2]]; },
	lshift_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] << b[0], a[1] << b[1], a[2] << b[2]]; },
	lshift_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] << b, a[1] << b, a[2] << b, a[3] << b]; },
	lshift_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a << b[0], a << b[1], a << b[2], a << b[3]]; },
	lshift_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] << b[0], a[1] << b[1], a[2] << b[2], a[3] << b[3]]; },
	rshift_1_1(a: number, b: number): number { return a >> b; },
	rshift_2_1(a: [number, number], b: number): [number, number] { return [a[0] >> b, a[1] >> b]; },
	rshift_1_2(a: number, b: [number, number]): [number, number] { return [a >> b[0], a >> b[1]]; },
	rshift_2_2(a: [number, number], b: [number, number]): [number, number] { return [a[0] >> b[0], a[1] >> b[1]]; },
	rshift_3_1(a: [number, number, number], b: number): [number, number, number] { return [a[0] >> b, a[1] >> b, a[2] >> b]; },
	rshift_1_3(a: number, b: [number, number, number]): [number, number, number] { return [a >> b[0], a >> b[1], a >> b[2]]; },
	rshift_3_3(a: [number, number, number], b: [number, number, number]): [number, number, number] { return [a[0] >> b[0], a[1] >> b[1], a[2] >> b[2]]; },
	rshift_4_1(a: [number, number, number, number], b: number): [number, number, number, number] { return [a[0] >> b, a[1] >> b, a[2] >> b, a[3] >> b]; },
	rshift_1_4(a: number, b: [number, number, number, number]): [number, number, number, number] { return [a >> b[0], a >> b[1], a >> b[2], a >> b[3]]; },
	rshift_4_4(a: [number, number, number, number], b: [number, number, number, number]): [number, number, number, number] { return [a[0] >> b[0], a[1] >> b[1], a[2] >> b[2], a[3] >> b[3]]; },
	bitnot_1(a: number): number { return ~a; },
	bitnot_2(a: [number, number]): [number, number] { return [~a[0], ~a[1]]; },
	bitnot_3(a: [number, number, number]): [number, number, number] { return [~a[0], ~a[1], ~a[2]]; },
	bitnot_4(a: [number, number, number, number]): [number, number, number, number] { return [~a[0], ~a[1], ~a[2], ~a[3]]; },
	negate_1(a: number): number { return -a; },
	negate_2(a: [number, number]): [number, number] { return [-a[0], -a[1]]; },
	negate_3(a: [number, number, number]): [number, number, number] { return [-a[0], -a[1], -a[2]]; },
	negate_4(a: [number, number, number, number]): [number, number, number, number] { return [-a[0], -a[1], -a[2], -a[3]]; },
	positive_1(a: number): number { return Math.abs(a); },
	positive_2(a: [number, number]): [number, number] { return [Math.abs(a[0]), Math.abs(a[1])]; },
	positive_3(a: [number, number, number]): [number, number, number] { return [Math.abs(a[0]), Math.abs(a[1]), Math.abs(a[2])]; },
	positive_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.abs(a[0]), Math.abs(a[1]), Math.abs(a[2]), Math.abs(a[3])]; },
	abs_1(a: number): number { return Math.abs(a); },
	abs_2(a: [number, number]): [number, number] { return [Math.abs(a[0]), Math.abs(a[1])]; },
	abs_3(a: [number, number, number]): [number, number, number] { return [Math.abs(a[0]), Math.abs(a[1]), Math.abs(a[2])]; },
	abs_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.abs(a[0]), Math.abs(a[1]), Math.abs(a[2]), Math.abs(a[3])]; },
	floor_1(a: number): number { return Math.floor(a); },
	floor_2(a: [number, number]): [number, number] { return [Math.floor(a[0]), Math.floor(a[1])]; },
	floor_3(a: [number, number, number]): [number, number, number] { return [Math.floor(a[0]), Math.floor(a[1]), Math.floor(a[2])]; },
	floor_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.floor(a[0]), Math.floor(a[1]), Math.floor(a[2]), Math.floor(a[3])]; },
	ceil_1(a: number): number { return Math.ceil(a); },
	ceil_2(a: [number, number]): [number, number] { return [Math.ceil(a[0]), Math.ceil(a[1])]; },
	ceil_3(a: [number, number, number]): [number, number, number] { return [Math.ceil(a[0]), Math.ceil(a[1]), Math.ceil(a[2])]; },
	ceil_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.ceil(a[0]), Math.ceil(a[1]), Math.ceil(a[2]), Math.ceil(a[3])]; },
	round_1(a: number): number { return Math.round(a); },
	round_2(a: [number, number]): [number, number] { return [Math.round(a[0]), Math.round(a[1])]; },
	round_3(a: [number, number, number]): [number, number, number] { return [Math.round(a[0]), Math.round(a[1]), Math.round(a[2])]; },
	round_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.round(a[0]), Math.round(a[1]), Math.round(a[2]), Math.round(a[3])]; },
	sign_1(a: number): number { return Math.sign(a); },
	sign_2(a: [number, number]): [number, number] { return [Math.sign(a[0]), Math.sign(a[1])]; },
	sign_3(a: [number, number, number]): [number, number, number] { return [Math.sign(a[0]), Math.sign(a[1]), Math.sign(a[2])]; },
	sign_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.sign(a[0]), Math.sign(a[1]), Math.sign(a[2]), Math.sign(a[3])]; },
	cos_1(a: number): number { return Math.cos(a); },
	cos_2(a: [number, number]): [number, number] { return [Math.cos(a[0]), Math.cos(a[1])]; },
	cos_3(a: [number, number, number]): [number, number, number] { return [Math.cos(a[0]), Math.cos(a[1]), Math.cos(a[2])]; },
	cos_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.cos(a[0]), Math.cos(a[1]), Math.cos(a[2]), Math.cos(a[3])]; },
	sin_1(a: number): number { return Math.sin(a); },
	sin_2(a: [number, number]): [number, number] { return [Math.sin(a[0]), Math.sin(a[1])]; },
	sin_3(a: [number, number, number]): [number, number, number] { return [Math.sin(a[0]), Math.sin(a[1]), Math.sin(a[2])]; },
	sin_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.sin(a[0]), Math.sin(a[1]), Math.sin(a[2]), Math.sin(a[3])]; },
	tan_1(a: number): number { return Math.tan(a); },
	tan_2(a: [number, number]): [number, number] { return [Math.tan(a[0]), Math.tan(a[1])]; },
	tan_3(a: [number, number, number]): [number, number, number] { return [Math.tan(a[0]), Math.tan(a[1]), Math.tan(a[2])]; },
	tan_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.tan(a[0]), Math.tan(a[1]), Math.tan(a[2]), Math.tan(a[3])]; },
	acos_1(a: number): number { return Math.acos(a); },
	acos_2(a: [number, number]): [number, number] { return [Math.acos(a[0]), Math.acos(a[1])]; },
	acos_3(a: [number, number, number]): [number, number, number] { return [Math.acos(a[0]), Math.acos(a[1]), Math.acos(a[2])]; },
	acos_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.acos(a[0]), Math.acos(a[1]), Math.acos(a[2]), Math.acos(a[3])]; },
	asin_1(a: number): number { return Math.asin(a); },
	asin_2(a: [number, number]): [number, number] { return [Math.asin(a[0]), Math.asin(a[1])]; },
	asin_3(a: [number, number, number]): [number, number, number] { return [Math.asin(a[0]), Math.asin(a[1]), Math.asin(a[2])]; },
	asin_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.asin(a[0]), Math.asin(a[1]), Math.asin(a[2]), Math.asin(a[3])]; },
	atan_1(a: number): number { return Math.atan(a); },
	atan_2(a: [number, number]): [number, number] { return [Math.atan(a[0]), Math.atan(a[1])]; },
	atan_3(a: [number, number, number]): [number, number, number] { return [Math.atan(a[0]), Math.atan(a[1]), Math.atan(a[2])]; },
	atan_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.atan(a[0]), Math.atan(a[1]), Math.atan(a[2]), Math.atan(a[3])]; },
	cosh_1(a: number): number { return Math.cosh(a); },
	cosh_2(a: [number, number]): [number, number] { return [Math.cosh(a[0]), Math.cosh(a[1])]; },
	cosh_3(a: [number, number, number]): [number, number, number] { return [Math.cosh(a[0]), Math.cosh(a[1]), Math.cosh(a[2])]; },
	cosh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.cosh(a[0]), Math.cosh(a[1]), Math.cosh(a[2]), Math.cosh(a[3])]; },
	sinh_1(a: number): number { return Math.sinh(a); },
	sinh_2(a: [number, number]): [number, number] { return [Math.sinh(a[0]), Math.sinh(a[1])]; },
	sinh_3(a: [number, number, number]): [number, number, number] { return [Math.sinh(a[0]), Math.sinh(a[1]), Math.sinh(a[2])]; },
	sinh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.sinh(a[0]), Math.sinh(a[1]), Math.sinh(a[2]), Math.sinh(a[3])]; },
	tanh_1(a: number): number { return Math.tanh(a); },
	tanh_2(a: [number, number]): [number, number] { return [Math.tanh(a[0]), Math.tanh(a[1])]; },
	tanh_3(a: [number, number, number]): [number, number, number] { return [Math.tanh(a[0]), Math.tanh(a[1]), Math.tanh(a[2])]; },
	tanh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.tanh(a[0]), Math.tanh(a[1]), Math.tanh(a[2]), Math.tanh(a[3])]; },
	acosh_1(a: number): number { return Math.acosh(a); },
	acosh_2(a: [number, number]): [number, number] { return [Math.acosh(a[0]), Math.acosh(a[1])]; },
	acosh_3(a: [number, number, number]): [number, number, number] { return [Math.acosh(a[0]), Math.acosh(a[1]), Math.acosh(a[2])]; },
	acosh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.acosh(a[0]), Math.acosh(a[1]), Math.acosh(a[2]), Math.acosh(a[3])]; },
	asinh_1(a: number): number { return Math.asinh(a); },
	asinh_2(a: [number, number]): [number, number] { return [Math.asinh(a[0]), Math.asinh(a[1])]; },
	asinh_3(a: [number, number, number]): [number, number, number] { return [Math.asinh(a[0]), Math.asinh(a[1]), Math.asinh(a[2])]; },
	asinh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.asinh(a[0]), Math.asinh(a[1]), Math.asinh(a[2]), Math.asinh(a[3])]; },
	atanh_1(a: number): number { return Math.atanh(a); },
	atanh_2(a: [number, number]): [number, number] { return [Math.atanh(a[0]), Math.atanh(a[1])]; },
	atanh_3(a: [number, number, number]): [number, number, number] { return [Math.atanh(a[0]), Math.atanh(a[1]), Math.atanh(a[2])]; },
	atanh_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.atanh(a[0]), Math.atanh(a[1]), Math.atanh(a[2]), Math.atanh(a[3])]; },
	exp_1(a: number): number { return Math.exp(a); },
	exp_2(a: [number, number]): [number, number] { return [Math.exp(a[0]), Math.exp(a[1])]; },
	exp_3(a: [number, number, number]): [number, number, number] { return [Math.exp(a[0]), Math.exp(a[1]), Math.exp(a[2])]; },
	exp_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.exp(a[0]), Math.exp(a[1]), Math.exp(a[2]), Math.exp(a[3])]; },
	log_1(a: number): number { return Math.log(a); },
	log_2(a: [number, number]): [number, number] { return [Math.log(a[0]), Math.log(a[1])]; },
	log_3(a: [number, number, number]): [number, number, number] { return [Math.log(a[0]), Math.log(a[1]), Math.log(a[2])]; },
	log_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.log(a[0]), Math.log(a[1]), Math.log(a[2]), Math.log(a[3])]; },
	log2_1(a: number): number { return Math.log2(a); },
	log2_2(a: [number, number]): [number, number] { return [Math.log2(a[0]), Math.log2(a[1])]; },
	log2_3(a: [number, number, number]): [number, number, number] { return [Math.log2(a[0]), Math.log2(a[1]), Math.log2(a[2])]; },
	log2_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.log2(a[0]), Math.log2(a[1]), Math.log2(a[2]), Math.log2(a[3])]; },
	log10_1(a: number): number { return Math.log10(a); },
	log10_2(a: [number, number]): [number, number] { return [Math.log10(a[0]), Math.log10(a[1])]; },
	log10_3(a: [number, number, number]): [number, number, number] { return [Math.log10(a[0]), Math.log10(a[1]), Math.log10(a[2])]; },
	log10_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.log10(a[0]), Math.log10(a[1]), Math.log10(a[2]), Math.log10(a[3])]; },
	sqrt_1(a: number): number { return Math.sqrt(a); },
	sqrt_2(a: [number, number]): [number, number] { return [Math.sqrt(a[0]), Math.sqrt(a[1])]; },
	sqrt_3(a: [number, number, number]): [number, number, number] { return [Math.sqrt(a[0]), Math.sqrt(a[1]), Math.sqrt(a[2])]; },
	sqrt_4(a: [number, number, number, number]): [number, number, number, number] { return [Math.sqrt(a[0]), Math.sqrt(a[1]), Math.sqrt(a[2]), Math.sqrt(a[3])]; },
	int_2_1_1(a: number, b: number): [number, number] { return [a|0, b|0]; },
	int_2_2(a: [number, number]): [number, number] { return [a[0]|0, a[1]|0]; },
	int_3_1_1_1(a: number, b: number, c: number): [number, number, number] { return [a|0, b|0, c|0]; },
	int_3_2_1(a: [number, number], b: number): [number, number, number] { return [a[0]|0, a[1]|0, b|0]; },
	int_3_1_2(a: number, b: [number, number]): [number, number, number] { return [a|0, b[0]|0, b[1]|0]; },
	int_3_3(a: [number, number, number]): [number, number, number] { return [a[0]|0, a[1]|0, a[2]|0]; },
	int_4_1_1_1_1(a: number, b: number, c: number, d: number): [number, number, number, number] { return [a|0, b|0, c|0, d|0]; },
	int_4_2_1_1(a: [number, number], b: number, c: number): [number, number, number, number] { return [a[0]|0, a[1]|0, b|0, c|0]; },
	int_4_1_2_1(a: number, b: [number, number], c: number): [number, number, number, number] { return [a|0, b[0]|0, b[1]|0, c|0]; },
	int_4_1_1_2(a: number, b: number, c: [number, number]): [number, number, number, number] { return [a|0, b|0, c[0]|0, c[1]|0]; },
	int_4_3_1(a: [number, number, number], b: number): [number, number, number, number] { return [a[0]|0, a[1]|0, a[2]|0, b|0]; },
	int_4_1_3(a: number, b: [number, number, number]): [number, number, number, number] { return [a|0, b[0]|0, b[1]|0, b[2]|0]; },
	int_4_2_2(a: [number, number], b: [number, number]): [number, number, number, number] { return [a[0]|0, a[1]|0, b[0]|0, b[1]|0]; },
	int_4_4(a: [number, number, number, number]): [number, number, number, number] { return [a[0]|0, a[1]|0, a[2]|0, a[3]|0]; },
	float_2_1_1(a: number, b: number): [number, number] { return [a, b]; },
	float_2_2(a: [number, number]): [number, number] { return [a[0], a[1]]; },
	float_3_1_1_1(a: number, b: number, c: number): [number, number, number] { return [a, b, c]; },
	float_3_2_1(a: [number, number], b: number): [number, number, number] { return [a[0], a[1], b]; },
	float_3_1_2(a: number, b: [number, number]): [number, number, number] { return [a, b[0], b[1]]; },
	float_3_3(a: [number, number, number]): [number, number, number] { return [a[0], a[1], a[2]]; },
	float_4_1_1_1_1(a: number, b: number, c: number, d: number): [number, number, number, number] { return [a, b, c, d]; },
	float_4_2_1_1(a: [number, number], b: number, c: number): [number, number, number, number] { return [a[0], a[1], b, c]; },
	float_4_1_2_1(a: number, b: [number, number], c: number): [number, number, number, number] { return [a, b[0], b[1], c]; },
	float_4_1_1_2(a: number, b: number, c: [number, number]): [number, number, number, number] { return [a, b, c[0], c[1]]; },
	float_4_3_1(a: [number, number, number], b: number): [number, number, number, number] { return [a[0], a[1], a[2], b]; },
	float_4_1_3(a: number, b: [number, number, number]): [number, number, number, number] { return [a, b[0], b[1], b[2]]; },
	float_4_2_2(a: [number, number], b: [number, number]): [number, number, number, number] { return [a[0], a[1], b[0], b[1]]; },
	float_4_4(a: [number, number, number, number]): [number, number, number, number] { return [a[0], a[1], a[2], a[3]]; },
	uint_2_1_1(a: number, b: number): [number, number] { return [a>>>0, b>>>0]; },
	uint_2_2(a: [number, number]): [number, number] { return [a[0]>>>0, a[1]>>>0]; },
	uint_3_1_1_1(a: number, b: number, c: number): [number, number, number] { return [a>>>0, b>>>0, c>>>0]; },
	uint_3_2_1(a: [number, number], b: number): [number, number, number] { return [a[0]>>>0, a[1]>>>0, b>>>0]; },
	uint_3_1_2(a: number, b: [number, number]): [number, number, number] { return [a>>>0, b[0]>>>0, b[1]>>>0]; },
	uint_3_3(a: [number, number, number]): [number, number, number] { return [a[0]>>>0, a[1]>>>0, a[2]>>>0]; },
	uint_4_1_1_1_1(a: number, b: number, c: number, d: number): [number, number, number, number] { return [a>>>0, b>>>0, c>>>0, d>>>0]; },
	uint_4_2_1_1(a: [number, number], b: number, c: number): [number, number, number, number] { return [a[0]>>>0, a[1]>>>0, b>>>0, c>>>0]; },
	uint_4_1_2_1(a: number, b: [number, number], c: number): [number, number, number, number] { return [a>>>0, b[0]>>>0, b[1]>>>0, c>>>0]; },
	uint_4_1_1_2(a: number, b: number, c: [number, number]): [number, number, number, number] { return [a>>>0, b>>>0, c[0]>>>0, c[1]>>>0]; },
	uint_4_3_1(a: [number, number, number], b: number): [number, number, number, number] { return [a[0]>>>0, a[1]>>>0, a[2]>>>0, b>>>0]; },
	uint_4_1_3(a: number, b: [number, number, number]): [number, number, number, number] { return [a>>>0, b[0]>>>0, b[1]>>>0, b[2]>>>0]; },
	uint_4_2_2(a: [number, number], b: [number, number]): [number, number, number, number] { return [a[0]>>>0, a[1]>>>0, b[0]>>>0, b[1]>>>0]; },
	uint_4_4(a: [number, number, number, number]): [number, number, number, number] { return [a[0]>>>0, a[1]>>>0, a[2]>>>0, a[3]>>>0]; },
}
